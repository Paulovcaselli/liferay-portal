@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test AddFieldsetOnBuilderWithSameFieldType {
		property portal.acceptance = "false";

		// TODO LPS-107630 AddFieldsetOnBuilderWithSameFieldType pending implementation

	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test AddFieldsetOnOtherFieldsetAlreadyOnBuilder {
		property portal.acceptance = "false";

		// TODO LPS-107630 AddFieldsetOnOtherFieldsetAlreadyOnBuilder pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "5"
	test DuplicateFieldset {
		property portal.acceptance = "false";
		
		ProductMenu.gotoPortlet(
            category = "Content & Data",
            panel = "Site Administration",
            portlet = "Web Content"           
        );
        NavItem.gotoStructures();
        
        WebContentStructures.addCP(
		    structureDescription = "DuplicateTest",
			structureName = "DuplicateTest");

		DataEngine.addFields(fieldNameList = "Text,Image,Upload");

		WebContentStructures.saveCP(structureName = "DuplicateTest");

        WebContentStructures.addCP(
		    structureDescription = "DuplicateTest1",
			structureName = "DuplicateTest1");
        
        DataEngine.addFieldsets(
			fieldsetsLabel = "DuplicateTest",
			fieldsetsName = "DuplicateTest");

		
        Click(locator1 = "//div[contains(@class,'fieldset')]//label[text()='DuplicateTest']");

		Click(
			key_text = "DuplicateTest",
			locator1 = "Icon#ANY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Duplicate");

        AssertElementPresent(locator1 = "//div[contains(@class,'fieldset')]//label[text()='Copy of DuplicateTest']");

        AssertElementPresent(locator1 = "//label[contains(text(),'Copy of Text')]");

        AssertElementPresent(locator1 = "//label[contains(text(),'Copy of Image')]");

        AssertElementPresent(locator1 = "//label[contains(text(),'Copy of Upload')]");

        WebContentStructures.saveCP(structureName = "DuplicateTest1");
        
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test EditFieldsetPropertiesFromSideBar {
		property portal.acceptance = "false";

		// TODO LPS-107630 EditFieldsetPropertiesFromSideBar pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "5"
	test FieldsetNameRenamedWhenNameAlreadyExistent {
		property portal.acceptance = "false";

		// TODO LPS-107630 FieldsetNameRenamedWhenNameAlreadyExistent pending implementation
		ProductMenu.gotoPortlet(
            category = "Content & Data",
            panel = "Site Administration",
            portlet = "Web Content"           
        );
        NavItem.gotoStructures();
        WebContentStructures.addCP(
		    structureDescription = "Reference Test",
			structureName = "Reference Test");
        DataEngine.addField(
            field = "Text",
            fieldFieldLabel = "Text",
            fieldName = "Text");
		DataEngine.addField(
            field = "Text",
            fieldFieldLabel = "Text",
            fieldName = "Text");

	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test FieldsetSetAsCollapsible {
		property portal.acceptance = "false";

		// TODO LPS-107630 FieldsetSetAsCollapsible pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test FieldsetSetAsRepeatable {
		property portal.acceptance = "false";

		// TODO LPS-107630 FieldsetSetAsRepeatable pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test RepeatFieldsetWithoutDuplicatingContent {
		property portal.acceptance = "false";

		// TODO LPS-107630 RepeatFieldsetWithoutDuplicatingContent pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test SaveStructureAddingBackFieldset {
		property portal.acceptance = "false";

		// TODO LPS-107630 SaveStructureAddingBackFieldset pending implementation
	}

	@description = "This is a test for LPS-107630. As an App Adm, I want to use an existing fieldset"
	@ignore = "true"
	@priority = "4"
	test ShowAndHideFieldsetLabel {
		property portal.acceptance = "false";

		// TODO LPS-107630 ShowAndHideFieldsetLabel pending implementation
	}

}