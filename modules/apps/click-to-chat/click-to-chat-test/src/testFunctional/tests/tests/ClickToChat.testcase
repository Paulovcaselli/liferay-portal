@component-name = "portal-solutions"
@ignore = "true"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Click to Chat";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@priority = "5"
	test EnableAndDisableJivoChat {
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Click to Chat",
			configurationName = "Click to Chat Configuration",
			configurationScope = "Virtual Instance Scope");

		FormFields.enableCheckbox(fieldName = "enabled");

		FormFields.selectSelectOption(
			fieldName = "siteSettingsStrategy",
			selectOption = "Always Inherit");

		FormFields.selectSelectOption(
			fieldName = "chatProviderId",
			selectOption = "JivoChat");

		var clickToChatJivochatPassword = PropsUtil.get("click.to.chat.jivochat.password");

		FormFields.editText(
			fieldName = "chatProviderAccountId",
			fieldValue = "${clickToChatJivochatPassword}");

		SystemSettings.saveConfiguration();

		Refresh();

		AssertElementPresent(locator1 = "Providers#CHAT_JIVOCHAT");

		FormFields.disableCheckbox(fieldName = "enabled");

		SystemSettings.saveConfiguration();

		Refresh();

		AssertElementNotPresent(locator1 = "Providers#CHAT_JIVOCHAT");
	}

	@priority = "5"
	test EnableAndDisableLivePerson {
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Click to Chat",
			configurationName = "Click to Chat Configuration",
			configurationScope = "Virtual Instance Scope");

		FormFields.enableCheckbox(fieldName = "enabled");

		FormFields.selectSelectOption(
			fieldName = "siteSettingsStrategy",
			selectOption = "Always Inherit");

		FormFields.selectSelectOption(
			fieldName = "chatProviderId",
			selectOption = "Liveperson");

		var clickToChatLivepersonPassword = PropsUtil.get("click.to.chat.liveperson.password");

		FormFields.editText(
			fieldName = "chatProviderAccountId",
			fieldValue = "${clickToChatLivepersonPassword}");

		SystemSettings.saveConfiguration();

		Refresh();

		AssertElementPresent(locator1 = "Providers#CHAT_LIVEPERSON");

		FormFields.disableCheckbox(fieldName = "enabled");

		SystemSettings.saveConfiguration();

		Refresh();

		AssertElementNotPresent(locator1 = "Providers#CHAT_LIVEPERSON");
	}

	@priority = "4"
	test HideChatProvider {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Click to Chat",
			configurationName = "Click to Chat Configuration",
			configurationScope = "Virtual Instance Scope");

		FormFields.enableCheckbox(fieldName = "enabled");

		FormFields.selectSelectOption(
			fieldName = "siteSettingsStrategy",
			selectOption = "Always Override");

		AssertNotVisible(
			key_fieldName = "chatProviderId",
			locator1 = "FormFields#TEXT_FIELD");

		AssertNotVisible(
			key_fieldName = "chatProviderAccountId",
			locator1 = "FormFields#TEXT_FIELD");
	}

}